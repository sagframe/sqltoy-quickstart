<?xml version="1.0" encoding="utf-8"?>
<sqltoy xmlns="https://www.sagframe.com/schema/sqltoy"
	xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://www.sagframe.com/schema/sqltoy https://www.sagframe.com/schema/sqltoy/sqltoy.xsd">
	<!-- -->
	<!-- 演示分库 -->
	<sql id="qstart_db_sharding_case">
		<sharding-datasource strategy="hashDataSource"
			params="userId" />
		<value>
			<![CDATA[
			select * from sqltoy_user_log t 
			-- userId 作为分库关键字段属于必备条件
			where t.user_id=:userId 
			#[and t.log_date>=:beginDate]
			#[and t.log_date<=:endDate]
				]]>
		</value>
	</sql>

	<!-- 演示分表 -->
	<sql id="qstart_sharding_table_case">
		<sharding-table tables="sqltoy_trans_info_15d"
			strategy="realHisTable" params="beginDate" />
		<value>
			<![CDATA[
			select * from sqltoy_trans_info_15d t 
			where t.trans_date>=:beginDate
			#[and t.trans_date<=:endDate]
				]]>
		</value>
	</sql>

	<!-- 演示树形表递归查询 -->
	<sql id="qstart_treeTable_search">
		<value>
			<![CDATA[
			select * from sqltoy_organ_info t 
			where exists 
			(
				select 1 from sqltoy_organ_info t1 
				where t1.ORGAN_ID=t.ORGAN_ID
				and instr(t1.NODE_ROUTE,:nodeRoute)
			)
				]]>
		</value>
	</sql>

	<!-- 快速分页和分页优化演示 -->
	<sql id="qstart_fastPage">
		<!-- 分页优化器,通过缓存实现查询条件一致的情况下在一定时间周期内缓存总记录数量，从而无需每次查询总记录数量 -->
		<!-- alive-max:最大存放多少个不同查询条件的总记录量; alive-seconds:查询条件记录量存活时长(比如120秒,超过阀值则重新查询) -->
		<page-optimize alive-max="100" alive-seconds="120" />
		<!-- 安全脱敏,type提供了几种标准的脱敏模式 mask-rate:脱敏比例 mask-code:自定义脱敏掩码,一般***,默认为*** 
			head-size:前面保留多长字符 tail-size:尾部保留多长字符 -->
		<secure-mask columns="address" type="address" />
		<secure-mask columns="tel_no" type="tel" />
		<value>
			<![CDATA[
			select t1.*,t2.ORGAN_NAME 
			-- @fast() 实现先分页取10条(具体数量由pageSize确定),然后再进行管理
			from @fast(select t.*
			           from sqltoy_staff_info t
			           where t.STATUS=1 
			             #[and t.STAFF_NAME like :staffName] 
			           order by t.ENTRY_DATE desc
			            ) t1 
			left join sqltoy_organ_info t2 on  t1.organ_id=t2.ORGAN_ID
				]]>
		</value>
		<!-- 这里为极特殊情况下提供了自定义count-sql来实现极致性能优化 -->
		<!-- <count-sql></count-sql> -->
	</sql>


	<!-- 整个配置很长，但多数是注释便于读者更加理解一些特殊的用法 -->
	<!-- 综合查询缓存翻译、缓存条件过滤演示： 1)通过缓存将代码转化为名称，避免关联查询，极大简化sql并提升查询效率 2)通过缓存名称模糊匹配获取精准的编码作为条件，避免关联like 
		模糊查询 -->
	<sql id="qstart_order_search">
		<!-- 缓存翻译设备类型 cache:具体的缓存定义的名称 cache-type:一般针对数据字典，提供一个分类条件过滤 columns:sql中的查询字段名称，可以逗号分隔对多个字段进行翻译 
			cache-indexs:缓存数据名称对应的列,不填则默认为第二列(从0开始,1则表示第二列)，例如缓存的数据结构是:key、name、fullName,则第三列表示全称 -->
		<translate cache="dictKeyName" cache-type="DEVICE_TYPE"
			columns="deviceTypeName" cache-indexs="1" />
		<!-- 缓存翻译购销类型 -->
		<translate cache="dictKeyName"
			cache-type="PURCHASE_SALE_TYPE" columns="psTypeName" />
		<!-- 缓存翻译订单状态 -->
		<translate cache="dictKeyName" cache-type="ORDER_STATUS"
			columns="statusName" />
		<!-- 员工名称翻译,如果同一个缓存则可以同时对几个字段进行翻译 -->
		<translate cache="staffIdName"
			columns="staffName,createName" />
		<!-- 机构名称翻译 -->
		<translate cache="organIdName" columns="organName" />
		<filters>
			<cache-arg cache-name="staffIdName" param="staffName"
				alias-name="staffIds">
				<!-- 可选配置:这里的filter是排除的概念,将符合条件的排除掉(可以不使用) compare-param:可以是具体的一个条件参数名称,也可以是一个固定值 
					cache-index:针对缓存具体哪一列进行值对比 compare-type:目前分 eq和neq两种情况 这里表示将状态无效的员工过滤掉 -->
				<filter compare-param="0" cache-index="2" compare-type="eq" />
			</cache-arg>
			<!-- 千万不要to_str(trans_date)>=:xxx 模式,sqltoy提供了日期、数字等类型转换,另外了解format的选项可以大幅简化代码处理 -->
			<to-date params="beginDate" format="yyyy-MM-dd" />
			<!-- 对截止日期加1,从而达到类似于 trans_date<='yyyy-MM-dd 23:59:59' 平衡时分秒因素 -->
			<to-date params="endDate" format="yyyy-MM-dd"
				increment-days="1" />
		</filters>
		<value>
			<![CDATA[
			select 	ORDER_ID,
					DEVICE_TYPE,
					-- 其实可以在数据库层进行创新(启发一下)，用函数式  @translate(dictKeyNameCache,DEVICE_TYPE,DEVICE_TYPE) deviceTypeName
					DEVICE_TYPE deviceTypeName,-- 设备分类名称
					PS_TYPE,
					PS_TYPE as psTypeName, -- 购销类别名称
					TOTAL_CNT,
					TOTAL_AMT,
					BUYER,
					SALER,
					TRANS_DATE,
					DELIVERY_TERM,
					STAFF_ID,
					STAFF_ID staffName, -- 员工姓名
					ORGAN_ID,
					ORGAN_ID organName, -- 机构名称
					CREATE_BY,
					CREATE_BY createName, -- 创建人名称
					CREATE_TIME,
					UPDATE_BY,
					UPDATE_TIME,
					STATUS,
					STATUS statusName -- 状态名称
			from sqltoy_device_order t 
			where #[t.ORDER_ID=:orderId]
			      -- 当前用户能够访问的授权组织机构，控制数据访问权限(一般登录后直接放于用户session中)
				  #[and t.ORGAN_ID in (:authedOrganIds)]
				  #[and t.STAFF_ID in (:staffIds)]
				  #[and t.TRANS_DATE>=:beginDate]
				  #[and t.TRANS_DATE<:endDate]
				]]>
		</value>
	</sql>

	<!-- 演示分组汇总 -->
	<sql id="qstart_group_summary_case">
		<value>
			<![CDATA[
			select t.fruit_name,t.order_month,t.sale_count,t.sale_price,t.total_amt 
			from sqltoy_fruit_order t
			order by t.fruit_name ,t.order_month
			]]>
		</value>
		<summary columns="sale_count,sale_price,total_amt"
			reverse="true">
			<!-- 层级顺序保持从高到低 -->
			<global sum-label="总计" label-column="fruit_name" />
			<group group-column="fruit_name" sum-label="小计"
				label-column="fruit_name" />
		</summary>
	</sql>

	<!-- 列与列高级环比演示 -->
	<sql id="qstart_cols_relative_case">
		<value>
			<![CDATA[
			select t.fruit_name,t.order_month,t.sale_count,t.sale_price,t.total_amt 
			from sqltoy_fruit_order t
			order by t.fruit_name ,t.order_month
			]]>
		</value>
		<!-- 数据旋转,行转列,将order_month 按列显示，每个月份下面有三个指标 -->
		<pivot start-column="sale_count" end-column="total_amt"
			group-columns="fruit_name" category-columns="order_month" />
		<!-- 列与列之间进行环比计算 -->
		<cols-chain-relative group-size="3"
			reduce-one="true" relative-indexs="1,2" start-column="1"
			format="#.00%" />
	</sql>

	<!-- 列与列高级环比演示 -->
	<sql id="mysql_qstart_cols_relative_case">
		<value>
			<![CDATA[
			select t.fruit_name,t.order_month,t.sale_count,t.sale_price,t.total_amt 
			from sqltoy_fruit_order t
			order by t.fruit_name ,t.order_month
			]]>
		</value>
		<!-- 数据旋转,行转列,将order_month 按列显示，每个月份下面有三个指标 -->
		<pivot start-column="sale_count" end-column="total_amt"
			group-columns="fruit_name" category-columns="order_month" />
		<!-- 列与列之间进行环比计算 -->
		<cols-chain-relative group-size="3"
			reduce-one="true" relative-indexs="1,2" start-column="1"
			format="#.00%" />
	</sql>

	<!-- 行与行高级环比演示 -->
	<sql id="qstart_rows_relative_case">
		<value>
			<![CDATA[
				select t.fruit_name,t.order_month,t.sale_count,t.sale_price,t.total_amt 
				from sqltoy_fruit_order t
				order by t.order_month desc,t.fruit_name
			]]>
		</value>
		<!-- group-size是 -->
		<rows-chain-relative group-column="fruit_name"
			relative-columns="sale_count,total_amt" />
	</sql>
	<!-- 列转行 -->
	<sql id="qstart_pivot_case">
		<value>
			<![CDATA[
				select t.fruit_name,t.order_month,t.sale_count,t.sale_price,t.total_amt 
				from sqltoy_fruit_order t
				order by t.fruit_name ,t.order_month
			]]>
		</value>
		<!-- 数据旋转,行转列,将order_month 按列显示，每个月份下面有三个指标 -->
		<pivot start-column="sale_count" end-column="total_amt"
			group-columns="fruit_name" category-columns="order_month" />
	</sql>
	<!-- 列转行 -->
	<sql id="qstart_unpivot_case">
		<value>
			<![CDATA[
				select t.fruit_name,t.order_month,t.sale_count,t.sale_price,t.total_amt 
				from sqltoy_fruit_order t
				order by t.order_month desc,t.fruit_name
			]]>
		</value>
		<unpivot
			columns-to-rows="sale_count:销售量,sale_price:销售金额,total_amt:总销售额"
			new-columns-labels="indexName,indexValue" />
	</sql>

	<!-- 演示link操作,如果分页请用@fast() 取10条后再关联，最终会返回10条记录 -->
	<sql id="qstart_link_case">
		<value>
			<![CDATA[
				select t.ORGAN_ID ,t.ORGAN_ID ORGAN_NAME, t.STAFF_NAME , t.SEX_TYPE,t.SEX_TYPE sexTypeName from sqltoy_staff_info t
				order by t.ORGAN_ID 
			]]>
		</value>
		<!-- 多个列合并,可以先翻译后合并 -->
		<link id-column="ORGAN_ID" columns="STAFF_NAME,sexTypeName"
			sign="," />
		<translate cache="dictKeyName" columns="sexTypeName"
			cache-type="SEX_TYPE" />
		<translate cache="organIdName" columns="ORGAN_NAME" />
	</sql>

	<sql id="qstart_link_case_simple">
		<value>
			<![CDATA[
				select    concat('\'',t1.ORGAN_ID,' \'') organIds
                from   sqltoy_ORGAN_info t1
			]]>
		</value>
		<!-- 单列极端场景 -->
		<link columns="organIds" sign="," />
	</sql>

	<!-- 循环的格式分:@loop(:loopParam,loopContent) 和 @loop(:loopParam,loopContent,linkSign),为了确保loop内部切割准确，可以@loop(:loopParam," 
		loopContent ","linkSign"),可以用双引号、单引号、花括号进行包裹 -->
	<sql id="qstart_loop_sql">
		<value>
			<![CDATA[
				select ORDER_ID
				       @loop(:fields,",:fields[i]")
				from sqltoy_device_order t 
				where #[t.ORDER_ID=:orderId]
				  -- @blank(:param) 目的是迎合sqltoy #[] 中参数为null剔除的功能，当值不为null时@blank()被替代为空白字符串(当然也可以用@if来代替@blank)
				  #[@if(size(:staffIds)>0) and (@loop(:staffIds," t.STAFF_ID=':staffIds[i]' "," or ","1","100"))]
				  #[@blank(:startDates) 
				       and ( @loop(:startDates,
				                     " t.TRANS_DATE between STR_TO_DATE(':startDates[i]','%Y-%m-%d') 
				                       and STR_TO_DATE(':endDates[i]','%Y-%m-%d') " ,
				                       " or "))]
			]]>
		</value>
	</sql>
</sqltoy>